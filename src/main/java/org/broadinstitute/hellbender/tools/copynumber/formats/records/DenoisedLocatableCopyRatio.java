package org.broadinstitute.hellbender.tools.copynumber.formats.records;

import htsjdk.samtools.util.Locatable;
import org.broadinstitute.hellbender.utils.SimpleInterval;
import org.broadinstitute.hellbender.utils.Utils;
import org.broadinstitute.hellbender.tools.copynumber.GermlineCNVCaller;

/**
 * Represents a value of denoised copy ratio generated by {@link GermlineCNVCaller} with the corresponding interval.
 *
 * @author Andrey Smirnov &lt;asmirnov@broadinstitute.org&gt;
 */
public class DenoisedLocatableCopyRatio implements Locatable {
    private final SimpleInterval interval;
    private final LinearNonLocatableCopyRatio denoisedCopyRatio;

    public DenoisedLocatableCopyRatio(final SimpleInterval interval, final LinearNonLocatableCopyRatio denoisedCopyRatio) {
        this.interval = Utils.nonNull(interval, "The interval for the segment must be non-null.");
        this.denoisedCopyRatio = Utils.nonNull(denoisedCopyRatio, "The denoised copy ratio must be non-null");
    }

    @Override
    public String getContig() {
        return interval.getContig();
    }

    @Override
    public int getStart() {
        return interval.getStart();
    }

    @Override
    public int getEnd() {
        return interval.getEnd();
    }

    public SimpleInterval getInterval() {
        return interval;
    }

    public LinearNonLocatableCopyRatio getDenoisedCopyRatio() {
        return denoisedCopyRatio;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DenoisedLocatableCopyRatio that = (DenoisedLocatableCopyRatio) o;

        if (!interval.equals(that.interval)) return false;
        return denoisedCopyRatio.equals(that.denoisedCopyRatio);

    }

    @Override
    public int hashCode() {
        int result = interval.hashCode();
        result = 31 * result + denoisedCopyRatio.hashCode();
        return result;
    }
}
