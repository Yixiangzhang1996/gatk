package org.broadinstitute.hellbender.tools.copynumber.formats.collections;

import org.broadinstitute.hellbender.exceptions.UserException;
import org.broadinstitute.hellbender.tools.copynumber.formats.records.NonLocatableLinearCopyRatio;
import org.broadinstitute.hellbender.tools.copynumber.gcnv.GermlineCNVNamingConstants;
import org.broadinstitute.hellbender.utils.tsv.DataLine;
import org.broadinstitute.hellbender.utils.tsv.TableColumnCollection;
import org.broadinstitute.hellbender.tools.copynumber.GermlineCNVCaller;

import java.io.File;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * Collection of denoised copy ratios in linear space generated by {@link GermlineCNVCaller}
 *
 * @author Andrey Smirnov &lt;asmirnov@broadinstitute.org&gt;
 */
public class NonLocatableLinearCopyRatioCollection extends AbstractSampleRecordCollection<NonLocatableLinearCopyRatio> {

    public NonLocatableLinearCopyRatioCollection(final File inputFile) {
        super(inputFile,
                new TableColumnCollection(GermlineCNVNamingConstants.DENOISED_COPY_RATIO_MEAN_TABLE_COLUMN),
                getDenoisedCopyRatioRecordFromDataLineDecoder(),
                getDenoisedCopyRatioRecordToDataLineEncoder());
    }

    /**
     * Generates an instance of {@link NonLocatableLinearCopyRatio} from a {@link DataLine} entry read from a denoised copy
     * ratio file generated by `gcnvkernel`.
     */
    private static Function<DataLine, NonLocatableLinearCopyRatio> getDenoisedCopyRatioRecordFromDataLineDecoder() {
        return dataLine -> {
            try {
                return new NonLocatableLinearCopyRatio(dataLine.getDouble(GermlineCNVNamingConstants.DENOISED_COPY_RATIO_MEAN_TABLE_COLUMN));
            } catch (final IllegalArgumentException ex) {
                throw new UserException.BadInput(String.format("Validation error occurred on line %d of the denoised copy ratio file : ", dataLine.getLineNumber())
                        + ex.getMessage());
            }
        };
    }

    /**
     * Generates an instance of {@link DataLine} from {@link NonLocatableLinearCopyRatio} for writing denoised copy ratio
     * collection to file.
     */
    private static BiConsumer<NonLocatableLinearCopyRatio, DataLine> getDenoisedCopyRatioRecordToDataLineEncoder() {
        return (denoisedCopyRatio, dataLine) -> dataLine.append(denoisedCopyRatio.getLinearCopyRatio());
    }

}
